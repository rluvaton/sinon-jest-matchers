// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`sinonToReturnWith a call that throws is not considered to have returned 1`] = `
"expect(sinon.spy()).sinonToReturnWith(expected)

Expected: undefined
Received: function call threw an error

Number of returns: 0
Number of calls:   1"
`;

exports[`sinonToReturnWith includes the custom mock name in the error message 1`] = `
"expect(named-mock).sinonToReturnWith(expected)

Expected: \\"foo\\"

Number of returns: 0"
`;

exports[`sinonToReturnWith works only on stubs or sinon.spies 1`] = `
"expect(received).sinonToReturnWith(expected)

Matcher error: received value must be a stub or spy function

Received has type:  function
Received has value: [Function fn]"
`;

exports[`sinonToReturnWith works when not called 1`] = `
"expect(sinon.spy()).sinonToReturnWith(expected)

Expected: \\"foo\\"

Number of returns: 0"
`;

exports[`sinonToReturnWith works with Immutable.js objects directly created 1`] = `
"expect(sinon.spy()).not.sinonToReturnWith(expected)

Expected: not Immutable.Map {\\"a\\": {\\"b\\": \\"c\\"}}

Number of returns: 1"
`;

exports[`sinonToReturnWith works with Immutable.js objects indirectly created 1`] = `
"expect(sinon.spy()).not.sinonToReturnWith(expected)

Expected: not Immutable.Map {\\"a\\": {\\"b\\": \\"c\\"}}

Number of returns: 1"
`;

exports[`sinonToReturnWith works with Map 1`] = `
"expect(sinon.spy()).not.sinonToReturnWith(expected)

Expected: not Map {1 => 2, 2 => 1}

Number of returns: 1"
`;

exports[`sinonToReturnWith works with Map 2`] = `
"expect(sinon.spy()).sinonToReturnWith(expected)

Expected: Map {\\"a\\" => \\"b\\", \\"b\\" => \\"a\\"}
Received: Map {1 => 2, 2 => 1}

Number of returns: 1"
`;

exports[`sinonToReturnWith works with Set 1`] = `
"expect(sinon.spy()).not.sinonToReturnWith(expected)

Expected: not Set {1, 2}

Number of returns: 1"
`;

exports[`sinonToReturnWith works with Set 2`] = `
"expect(sinon.spy()).sinonToReturnWith(expected)

Expected: Set {3, 4}
Received: Set {1, 2}

Number of returns: 1"
`;

exports[`sinonToReturnWith works with argument that does match 1`] = `
"expect(sinon.spy()).not.sinonToReturnWith(expected)

Expected: not \\"foo\\"

Number of returns: 1"
`;

exports[`sinonToReturnWith works with argument that does not match 1`] = `
"expect(sinon.spy()).sinonToReturnWith(expected)

Expected: \\"bar\\"
Received: \\"foo\\"

Number of returns: 1"
`;

exports[`sinonToReturnWith works with more calls than the limit 1`] = `
"expect(sinon.spy()).sinonToReturnWith(expected)

Expected: \\"bar\\"
Received
       1: \\"foo1\\"
       2: \\"foo2\\"
       3: \\"foo3\\"

Number of returns: 6"
`;

exports[`sinonToReturnWith works with undefined 1`] = `
"expect(sinon.spy()).not.sinonToReturnWith(expected)

Expected: not undefined

Number of returns: 1"
`;
