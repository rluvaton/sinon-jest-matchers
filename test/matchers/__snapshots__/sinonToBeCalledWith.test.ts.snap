// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`sinonToBeCalledWith includes the custom mock name in the error message 1`] = `
"expect(named-mock).not.sinonToBeCalledWith(...expected)

Expected: not \\"foo\\", \\"bar\\"

Number of calls: 1"
`;

exports[`sinonToBeCalledWith works only on spies or sinon.spy 1`] = `
"expect(received).sinonToBeCalledWith(...expected)

Matcher error: received value must be a stub or spy function

Received has type:  function
Received has value: [Function fn]"
`;

exports[`sinonToBeCalledWith works when not called 1`] = `
"expect(sinon.spy()).sinonToBeCalledWith(...expected)

Expected: \\"foo\\", \\"bar\\"

Number of calls: 0"
`;

exports[`sinonToBeCalledWith works with Immutable.js objects 1`] = `
"expect(sinon.spy()).not.sinonToBeCalledWith(...expected)

Expected: not Immutable.Map {\\"a\\": {\\"b\\": \\"c\\"}}, Immutable.Map {\\"a\\": {\\"b\\": \\"c\\"}}

Number of calls: 1"
`;

exports[`sinonToBeCalledWith works with Map 1`] = `
"expect(sinon.spy()).not.sinonToBeCalledWith(...expected)

Expected: not Map {1 => 2, 2 => 1}

Number of calls: 1"
`;

exports[`sinonToBeCalledWith works with Map 2`] = `
"expect(sinon.spy()).sinonToBeCalledWith(...expected)

- Expected
+ Received

  Map {
-   \\"a\\" => \\"b\\",
-   \\"b\\" => \\"a\\",
+   1 => 2,
+   2 => 1,
  },

Number of calls: 1"
`;

exports[`sinonToBeCalledWith works with Set 1`] = `
"expect(sinon.spy()).not.sinonToBeCalledWith(...expected)

Expected: not Set {1, 2}

Number of calls: 1"
`;

exports[`sinonToBeCalledWith works with Set 2`] = `
"expect(sinon.spy()).sinonToBeCalledWith(...expected)

- Expected
+ Received

  Set {
-   3,
-   4,
+   1,
+   2,
  },

Number of calls: 1"
`;

exports[`sinonToBeCalledWith works with arguments that don't match 1`] = `
"expect(sinon.spy()).sinonToBeCalledWith(...expected)

Expected: \\"foo\\", \\"bar\\"
Received: \\"foo\\", \\"bar1\\"

Number of calls: 1"
`;

exports[`sinonToBeCalledWith works with arguments that don't match in number of arguments 1`] = `
"expect(sinon.spy()).sinonToBeCalledWith(...expected)

Expected: \\"foo\\", \\"bar\\"
Received: \\"foo\\", \\"bar\\", \\"plop\\"

Number of calls: 1"
`;

exports[`sinonToBeCalledWith works with arguments that don't match with matchers 1`] = `
"expect(sinon.spy()).sinonToBeCalledWith(...expected)

Expected: Any<String>, Any<Number>
Received: \\"foo\\", \\"bar\\"

Number of calls: 1"
`;

exports[`sinonToBeCalledWith works with arguments that don't match with matchers even when argument is undefined 1`] = `
"expect(sinon.spy()).sinonToBeCalledWith(...expected)

Expected: \\"foo\\", Any<String>
Received: \\"foo\\", undefined

Number of calls: 1"
`;

exports[`sinonToBeCalledWith works with arguments that match 1`] = `
"expect(sinon.spy()).not.sinonToBeCalledWith(...expected)

Expected: not \\"foo\\", \\"bar\\"

Number of calls: 1"
`;

exports[`sinonToBeCalledWith works with arguments that match with matchers 1`] = `
"expect(sinon.spy()).not.sinonToBeCalledWith(...expected)

Expected: not Any<String>, Any<String>
Received:     0, [\\"foo\\", \\"bar\\"]

Number of calls: 1"
`;

exports[`sinonToBeCalledWith works with many arguments 1`] = `
"expect(sinon.spy()).not.sinonToBeCalledWith(...expected)

Expected: not \\"foo\\", \\"bar\\"
Received
       3:     \\"foo\\", \\"bar\\"

Number of calls: 3"
`;

exports[`sinonToBeCalledWith works with many arguments that don't match 1`] = `
"expect(sinon.spy()).sinonToBeCalledWith(...expected)

Expected: \\"foo\\", \\"bar\\"
Received
       1: \\"foo\\", \\"bar1\\"
       2: \\"foo\\", \\"bar2\\"
       3: \\"foo\\", \\"bar3\\"

Number of calls: 3"
`;

exports[`sinonToBeCalledWith works with trailing undefined arguments if requested by the match query 1`] = `
"expect(sinon.spy()).not.sinonToBeCalledWith(...expected)

Expected: not \\"foo\\", undefined

Number of calls: 1"
`;

exports[`sinonToBeCalledWith works with trailing undefined arguments when explicitly requested as optional by matcher 1`] = `
"expect(sinon.spy()).not.sinonToBeCalledWith(...expected)

Expected: not \\"foo\\", optionalFn<>
Received:     0, [\\"foo\\", undefined]

Number of calls: 1"
`;
