// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`sinonToBeCalledTimes .not only accepts a number argument 1`] = `
"expect(received).not.sinonToBeCalledTimes(expected)

Matcher error: expected value must be a non-negative integer

Expected has type:  object
Expected has value: {}"
`;

exports[`sinonToBeCalledTimes .not only accepts a number argument 2`] = `
"expect(received).not.sinonToBeCalledTimes(expected)

Matcher error: expected value must be a non-negative integer

Expected has type:  array
Expected has value: []"
`;

exports[`sinonToBeCalledTimes .not only accepts a number argument 3`] = `
"expect(received).not.sinonToBeCalledTimes(expected)

Matcher error: expected value must be a non-negative integer

Expected has type:  boolean
Expected has value: true"
`;

exports[`sinonToBeCalledTimes .not only accepts a number argument 4`] = `
"expect(received).not.sinonToBeCalledTimes(expected)

Matcher error: expected value must be a non-negative integer

Expected has type:  string
Expected has value: \\"a\\""
`;

exports[`sinonToBeCalledTimes .not only accepts a number argument 5`] = `
"expect(received).not.sinonToBeCalledTimes(expected)

Matcher error: expected value must be a non-negative integer

Expected has type:  map
Expected has value: Map {}"
`;

exports[`sinonToBeCalledTimes .not only accepts a number argument 6`] = `
"expect(received).not.sinonToBeCalledTimes(expected)

Matcher error: expected value must be a non-negative integer

Expected has type:  function
Expected has value: [Function anonymous]"
`;

exports[`sinonToBeCalledTimes .not passes if function called less than expected times 1`] = `
"expect(sinon.spy()).sinonToBeCalledTimes(expected)

Expected number of calls: 2
Received number of calls: 1"
`;

exports[`sinonToBeCalledTimes .not passes if function called more than expected times 1`] = `
"expect(sinon.spy()).sinonToBeCalledTimes(expected)

Expected number of calls: 2
Received number of calls: 3"
`;

exports[`sinonToBeCalledTimes .not works only on spies or jest.fn 1`] = `
"expect(received).not.sinonToBeCalledTimes(expected)

Matcher error: received value must be a stub or spy function

Received has type:  function
Received has value: [Function fn]"
`;

exports[`sinonToBeCalledTimes includes the custom mock name in the error message 1`] = `
"expect(received).sinonToBeCalledTimes(expected)

Matcher error: received value must be a stub or spy function

Received has type:  function
Received has value: [Function mockConstructor]"
`;

exports[`sinonToBeCalledTimes only accepts a number argument 1`] = `
"expect(received).sinonToBeCalledTimes(expected)

Matcher error: expected value must be a non-negative integer

Expected has type:  object
Expected has value: {}"
`;

exports[`sinonToBeCalledTimes only accepts a number argument 2`] = `
"expect(received).sinonToBeCalledTimes(expected)

Matcher error: expected value must be a non-negative integer

Expected has type:  array
Expected has value: []"
`;

exports[`sinonToBeCalledTimes only accepts a number argument 3`] = `
"expect(received).sinonToBeCalledTimes(expected)

Matcher error: expected value must be a non-negative integer

Expected has type:  boolean
Expected has value: true"
`;

exports[`sinonToBeCalledTimes only accepts a number argument 4`] = `
"expect(received).sinonToBeCalledTimes(expected)

Matcher error: expected value must be a non-negative integer

Expected has type:  string
Expected has value: \\"a\\""
`;

exports[`sinonToBeCalledTimes only accepts a number argument 5`] = `
"expect(received).sinonToBeCalledTimes(expected)

Matcher error: expected value must be a non-negative integer

Expected has type:  map
Expected has value: Map {}"
`;

exports[`sinonToBeCalledTimes only accepts a number argument 6`] = `
"expect(received).sinonToBeCalledTimes(expected)

Matcher error: expected value must be a non-negative integer

Expected has type:  function
Expected has value: [Function anonymous]"
`;

exports[`sinonToBeCalledTimes passes if function called equal to expected times 1`] = `
"expect(sinon.spy()).not.sinonToBeCalledTimes(expected)

Expected number of calls: not 2"
`;
