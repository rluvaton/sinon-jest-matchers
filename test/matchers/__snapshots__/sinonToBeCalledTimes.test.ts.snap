// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`sinonToBeCalledTimes .not only accepts a number argument 1`] = `
"[2mexpect([22m[31mreceived[39m[2m).[22mnot[2m.[22msinonToBeCalledTimes[2m([22m[32mexpected[39m[2m)[22m

[1mMatcher error[22m: [32mexpected[39m value must be a non-negative integer

Expected has type:  object
Expected has value: [32m{}[39m"
`;

exports[`sinonToBeCalledTimes .not only accepts a number argument 2`] = `
"[2mexpect([22m[31mreceived[39m[2m).[22mnot[2m.[22msinonToBeCalledTimes[2m([22m[32mexpected[39m[2m)[22m

[1mMatcher error[22m: [32mexpected[39m value must be a non-negative integer

Expected has type:  array
Expected has value: [32m[][39m"
`;

exports[`sinonToBeCalledTimes .not only accepts a number argument 3`] = `
"[2mexpect([22m[31mreceived[39m[2m).[22mnot[2m.[22msinonToBeCalledTimes[2m([22m[32mexpected[39m[2m)[22m

[1mMatcher error[22m: [32mexpected[39m value must be a non-negative integer

Expected has type:  boolean
Expected has value: [32mtrue[39m"
`;

exports[`sinonToBeCalledTimes .not only accepts a number argument 4`] = `
"[2mexpect([22m[31mreceived[39m[2m).[22mnot[2m.[22msinonToBeCalledTimes[2m([22m[32mexpected[39m[2m)[22m

[1mMatcher error[22m: [32mexpected[39m value must be a non-negative integer

Expected has type:  string
Expected has value: [32m\\"a\\"[39m"
`;

exports[`sinonToBeCalledTimes .not only accepts a number argument 5`] = `
"[2mexpect([22m[31mreceived[39m[2m).[22mnot[2m.[22msinonToBeCalledTimes[2m([22m[32mexpected[39m[2m)[22m

[1mMatcher error[22m: [32mexpected[39m value must be a non-negative integer

Expected has type:  map
Expected has value: [32mMap {}[39m"
`;

exports[`sinonToBeCalledTimes .not only accepts a number argument 6`] = `
"[2mexpect([22m[31mreceived[39m[2m).[22mnot[2m.[22msinonToBeCalledTimes[2m([22m[32mexpected[39m[2m)[22m

[1mMatcher error[22m: [32mexpected[39m value must be a non-negative integer

Expected has type:  function
Expected has value: [32m[Function anonymous][39m"
`;

exports[`sinonToBeCalledTimes .not passes if function called less than expected times 1`] = `
"[2mexpect([22m[31msinon.spy()[39m[2m).[22msinonToBeCalledTimes[2m([22m[32mexpected[39m[2m)[22m

Expected number of calls: [32m2[39m
Received number of calls: [31m1[39m"
`;

exports[`sinonToBeCalledTimes .not passes if function called more than expected times 1`] = `
"[2mexpect([22m[31msinon.spy()[39m[2m).[22msinonToBeCalledTimes[2m([22m[32mexpected[39m[2m)[22m

Expected number of calls: [32m2[39m
Received number of calls: [31m3[39m"
`;

exports[`sinonToBeCalledTimes .not works only on spies or jest.fn 1`] = `
"[2mexpect([22m[31mreceived[39m[2m).[22mnot[2m.[22msinonToBeCalledTimes[2m([22m[32mexpected[39m[2m)[22m

[1mMatcher error[22m: [31mreceived[39m value must be a stub or spy function

Received has type:  function
Received has value: [31m[Function fn][39m"
`;

exports[`sinonToBeCalledTimes includes the custom mock name in the error message 1`] = `
"[2mexpect([22m[31mreceived[39m[2m).[22msinonToBeCalledTimes[2m([22m[32mexpected[39m[2m)[22m

[1mMatcher error[22m: [31mreceived[39m value must be a stub or spy function

Received has type:  function
Received has value: [31m[Function mockConstructor][39m"
`;

exports[`sinonToBeCalledTimes only accepts a number argument 1`] = `
"[2mexpect([22m[31mreceived[39m[2m).[22msinonToBeCalledTimes[2m([22m[32mexpected[39m[2m)[22m

[1mMatcher error[22m: [32mexpected[39m value must be a non-negative integer

Expected has type:  object
Expected has value: [32m{}[39m"
`;

exports[`sinonToBeCalledTimes only accepts a number argument 2`] = `
"[2mexpect([22m[31mreceived[39m[2m).[22msinonToBeCalledTimes[2m([22m[32mexpected[39m[2m)[22m

[1mMatcher error[22m: [32mexpected[39m value must be a non-negative integer

Expected has type:  array
Expected has value: [32m[][39m"
`;

exports[`sinonToBeCalledTimes only accepts a number argument 3`] = `
"[2mexpect([22m[31mreceived[39m[2m).[22msinonToBeCalledTimes[2m([22m[32mexpected[39m[2m)[22m

[1mMatcher error[22m: [32mexpected[39m value must be a non-negative integer

Expected has type:  boolean
Expected has value: [32mtrue[39m"
`;

exports[`sinonToBeCalledTimes only accepts a number argument 4`] = `
"[2mexpect([22m[31mreceived[39m[2m).[22msinonToBeCalledTimes[2m([22m[32mexpected[39m[2m)[22m

[1mMatcher error[22m: [32mexpected[39m value must be a non-negative integer

Expected has type:  string
Expected has value: [32m\\"a\\"[39m"
`;

exports[`sinonToBeCalledTimes only accepts a number argument 5`] = `
"[2mexpect([22m[31mreceived[39m[2m).[22msinonToBeCalledTimes[2m([22m[32mexpected[39m[2m)[22m

[1mMatcher error[22m: [32mexpected[39m value must be a non-negative integer

Expected has type:  map
Expected has value: [32mMap {}[39m"
`;

exports[`sinonToBeCalledTimes only accepts a number argument 6`] = `
"[2mexpect([22m[31mreceived[39m[2m).[22msinonToBeCalledTimes[2m([22m[32mexpected[39m[2m)[22m

[1mMatcher error[22m: [32mexpected[39m value must be a non-negative integer

Expected has type:  function
Expected has value: [32m[Function anonymous][39m"
`;

exports[`sinonToBeCalledTimes passes if function called equal to expected times 1`] = `
"[2mexpect([22m[31msinon.spy()[39m[2m).[22mnot[2m.[22msinonToBeCalledTimes[2m([22m[32mexpected[39m[2m)[22m

Expected number of calls: not [32m2[39m"
`;
