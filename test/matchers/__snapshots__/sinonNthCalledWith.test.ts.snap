// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`sinonNthCalledWith includes the custom mock name in the error message 1`] = `
"[2mexpect([22m[31mnamed-mock[39m[2m).[22mnot[2m.[22msinonNthCalledWith[2m([22mn[2m, [22m[32m...expected[39m[2m)[22m

n: 1
Expected: not [32m\\"foo\\"[39m, [32m\\"bar\\"[39m

Number of calls: [31m1[39m"
`;

exports[`sinonNthCalledWith negative throw matcher error for n that is not integer 1`] = `
"[2mexpect([22m[31mreceived[39m[2m).[22mnot[2m.[22msinonNthCalledWith[2m([22mn[2m, [22m[32m...expected[39m[2m)[22m

[1mMatcher error[22m: n must be a positive integer

n has type:  number
n has value: Infinity"
`;

exports[`sinonNthCalledWith positive throw matcher error for n that is not integer 1`] = `
"[2mexpect([22m[31mreceived[39m[2m).[22msinonNthCalledWith[2m([22mn[2m, [22m[32m...expected[39m[2m)[22m

[1mMatcher error[22m: n must be a positive integer

n has type:  number
n has value: 0.1"
`;

exports[`sinonNthCalledWith positive throw matcher error for n that is not positive integer 1`] = `
"[2mexpect([22m[31mreceived[39m[2m).[22msinonNthCalledWith[2m([22mn[2m, [22m[32m...expected[39m[2m)[22m

[1mMatcher error[22m: n must be a positive integer

n has type:  number
n has value: 0"
`;

exports[`sinonNthCalledWith works only on stubs or sinon.spy 1`] = `
"[2mexpect([22m[31mreceived[39m[2m).[22msinonNthCalledWith[2m([22mn[2m, [22m[32m...expected[39m[2m)[22m

[1mMatcher error[22m: [31mreceived[39m value must be a stub or spy function

Received has type:  function
Received has value: [31m[Function fn][39m"
`;

exports[`sinonNthCalledWith works when not called 1`] = `
"[2mexpect.[22msinonNthCalledWith[2m([22mn[2m, [22m[32m...expected[39m[2m)[22m

n: 1
Expected: [32m\\"foo\\"[39m, [32m\\"bar\\"[39m

Number of calls: [31m0[39m"
`;

exports[`sinonNthCalledWith works with Immutable.js objects 1`] = `
"[2mexpect.[22mnot[2m.[22msinonNthCalledWith[2m([22mn[2m, [22m[32m...expected[39m[2m)[22m

n: 1
Expected: not [32mImmutable.Map {\\"a\\": {\\"b\\": \\"c\\"}}[39m, [32mImmutable.Map {\\"a\\": {\\"b\\": \\"c\\"}}[39m

Number of calls: [31m1[39m"
`;

exports[`sinonNthCalledWith works with Map 1`] = `
"[2mexpect.[22mnot[2m.[22msinonNthCalledWith[2m([22mn[2m, [22m[32m...expected[39m[2m)[22m

n: 1
Expected: not [32mMap {1 => 2, 2 => 1}[39m

Number of calls: [31m1[39m"
`;

exports[`sinonNthCalledWith works with Map 2`] = `
"[2mexpect.[22msinonNthCalledWith[2m([22mn[2m, [22m[32m...expected[39m[2m)[22m

n: 1
[32m- Expected[39m
[31m+ Received[39m

[2m  Map {[22m
[32m-   \\"a\\" => \\"b\\",[39m
[32m-   \\"b\\" => \\"a\\",[39m
[31m+   1 => 2,[39m
[31m+   2 => 1,[39m
[2m  }[22m,

Number of calls: [31m1[39m"
`;

exports[`sinonNthCalledWith works with Set 1`] = `
"[2mexpect.[22mnot[2m.[22msinonNthCalledWith[2m([22mn[2m, [22m[32m...expected[39m[2m)[22m

n: 1
Expected: not [32mSet {1, 2}[39m

Number of calls: [31m1[39m"
`;

exports[`sinonNthCalledWith works with Set 2`] = `
"[2mexpect.[22msinonNthCalledWith[2m([22mn[2m, [22m[32m...expected[39m[2m)[22m

n: 1
[32m- Expected[39m
[31m+ Received[39m

[2m  Set {[22m
[32m-   3,[39m
[32m-   4,[39m
[31m+   1,[39m
[31m+   2,[39m
[2m  }[22m,

Number of calls: [31m1[39m"
`;

exports[`sinonNthCalledWith works with arguments that don't match 1`] = `
"[2mexpect.[22msinonNthCalledWith[2m([22mn[2m, [22m[32m...expected[39m[2m)[22m

n: 1
Expected: [32m\\"foo\\"[39m, [32m\\"bar\\"[39m
Received: [2m\\"foo\\"[22m, [31m\\"bar1\\"[39m

Number of calls: [31m1[39m"
`;

exports[`sinonNthCalledWith works with arguments that don't match in number of arguments 1`] = `
"[2mexpect.[22msinonNthCalledWith[2m([22mn[2m, [22m[32m...expected[39m[2m)[22m

n: 1
Expected: [32m\\"foo\\"[39m, [32m\\"bar\\"[39m
Received: [2m\\"foo\\"[22m, [2m\\"bar\\"[22m, [31m\\"plop\\"[39m

Number of calls: [31m1[39m"
`;

exports[`sinonNthCalledWith works with arguments that don't match with matchers 1`] = `
"[2mexpect.[22msinonNthCalledWith[2m([22mn[2m, [22m[32m...expected[39m[2m)[22m

n: 1
Expected: [32mAny<String>[39m, [32mAny<Number>[39m
Received: [2m\\"foo\\"[22m, [31m\\"bar\\"[39m

Number of calls: [31m1[39m"
`;

exports[`sinonNthCalledWith works with arguments that don't match with matchers even when argument is undefined 1`] = `
"[2mexpect.[22msinonNthCalledWith[2m([22mn[2m, [22m[32m...expected[39m[2m)[22m

n: 1
Expected: [32m\\"foo\\"[39m, [32mAny<String>[39m
Received: [2m\\"foo\\"[22m, [31mundefined[39m

Number of calls: [31m1[39m"
`;

exports[`sinonNthCalledWith works with arguments that match 1`] = `
"[2mexpect.[22mnot[2m.[22msinonNthCalledWith[2m([22mn[2m, [22m[32m...expected[39m[2m)[22m

n: 1
Expected: not [32m\\"foo\\"[39m, [32m\\"bar\\"[39m

Number of calls: [31m1[39m"
`;

exports[`sinonNthCalledWith works with arguments that match with matchers 1`] = `
"[2mexpect.[22mnot[2m.[22msinonNthCalledWith[2m([22mn[2m, [22m[32m...expected[39m[2m)[22m

n: 1
Expected: not [32mAny<String>[39m, [32mAny<String>[39m
Received:     [31m0[39m, [31m[\\"foo\\", \\"bar\\"][39m

Number of calls: [31m1[39m"
`;

exports[`sinonNthCalledWith works with three calls 1`] = `
"[2mexpect.[22mnot[2m.[22msinonNthCalledWith[2m([22mn[2m, [22m[32m...expected[39m[2m)[22m

n: 1
Expected: not [32m\\"foo1\\"[39m, [32m\\"bar\\"[39m
Received
->     1:     [2m\\"foo1\\"[22m, [2m\\"bar\\"[22m
       2:     [31m\\"foo\\"[39m, [31m\\"bar1\\"[39m

Number of calls: [31m3[39m"
`;

exports[`sinonNthCalledWith works with trailing undefined arguments if requested by the match query 1`] = `
"[2mexpect.[22mnot[2m.[22msinonNthCalledWith[2m([22mn[2m, [22m[32m...expected[39m[2m)[22m

n: 1
Expected: not [32m\\"foo\\"[39m, [32mundefined[39m

Number of calls: [31m1[39m"
`;

exports[`sinonNthCalledWith works with trailing undefined arguments when explicitly requested as optional by matcher 1`] = `
"[2mexpect.[22mnot[2m.[22msinonNthCalledWith[2m([22mn[2m, [22m[32m...expected[39m[2m)[22m

n: 1
Expected: not [32m\\"foo\\"[39m, [32moptionalFn<>[39m
Received:     [31m0[39m, [31m[\\"foo\\", undefined][39m

Number of calls: [31m1[39m"
`;
