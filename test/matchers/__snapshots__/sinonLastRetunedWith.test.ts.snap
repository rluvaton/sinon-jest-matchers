// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`sinonLastReturnedWith a call that throws is not considered to have returned 1`] = `
"expect(sinon.spy()).sinonLastReturnedWith(expected)

Expected: undefined
Received: function call threw an error

Number of returns: 0
Number of calls:   1"
`;

exports[`sinonLastReturnedWith includes the custom mock name in the error message 1`] = `
"expect(named-mock).sinonLastReturnedWith(expected)

Expected: \\"foo\\"

Number of returns: 0"
`;

exports[`sinonLastReturnedWith lastReturnedWith incomplete recursive calls are handled properly 1`] = `
"expect(sinon.spy()).sinonLastReturnedWith(expected)

Expected: 0
Received
       3: undefined
->     4: undefined

Number of returns: 4"
`;

exports[`sinonLastReturnedWith lastReturnedWith works with three calls 1`] = `
"expect(sinon.spy()).not.sinonLastReturnedWith(expected)

Expected: not \\"foo3\\"
Received
       2:     \\"foo2\\"
->     3:     \\"foo3\\"

Number of returns: 3"
`;

exports[`sinonLastReturnedWith works only on stubs or sinon spies 1`] = `
"expect(received).sinonLastReturnedWith(expected)

Matcher error: received value must be a stub or spy function

Received has type:  function
Received has value: [Function fn]"
`;

exports[`sinonLastReturnedWith works when not called 1`] = `
"expect(sinon.spy()).sinonLastReturnedWith(expected)

Expected: \\"foo\\"

Number of returns: 0"
`;

exports[`sinonLastReturnedWith works with Immutable.js objects directly created 1`] = `
"expect(sinon.spy()).not.sinonLastReturnedWith(expected)

Expected: not Immutable.Map {\\"a\\": {\\"b\\": \\"c\\"}}

Number of returns: 1"
`;

exports[`sinonLastReturnedWith works with Immutable.js objects indirectly created 1`] = `
"expect(sinon.spy()).not.sinonLastReturnedWith(expected)

Expected: not Immutable.Map {\\"a\\": {\\"b\\": \\"c\\"}}

Number of returns: 1"
`;

exports[`sinonLastReturnedWith works with Map 1`] = `
"expect(sinon.spy()).not.sinonLastReturnedWith(expected)

Expected: not Map {1 => 2, 2 => 1}

Number of returns: 1"
`;

exports[`sinonLastReturnedWith works with Map 2`] = `
"expect(sinon.spy()).sinonLastReturnedWith(expected)

Expected: Map {\\"a\\" => \\"b\\", \\"b\\" => \\"a\\"}
Received: Map {1 => 2, 2 => 1}

Number of returns: 1"
`;

exports[`sinonLastReturnedWith works with Set 1`] = `
"expect(sinon.spy()).not.sinonLastReturnedWith(expected)

Expected: not Set {1, 2}

Number of returns: 1"
`;

exports[`sinonLastReturnedWith works with Set 2`] = `
"expect(sinon.spy()).sinonLastReturnedWith(expected)

Expected: Set {3, 4}
Received: Set {1, 2}

Number of returns: 1"
`;

exports[`sinonLastReturnedWith works with argument that does match 1`] = `
"expect(sinon.spy()).not.sinonLastReturnedWith(expected)

Expected: not \\"foo\\"

Number of returns: 1"
`;

exports[`sinonLastReturnedWith works with argument that does not match 1`] = `
"expect(sinon.spy()).sinonLastReturnedWith(expected)

Expected: \\"bar\\"
Received: \\"foo\\"

Number of returns: 1"
`;

exports[`sinonLastReturnedWith works with undefined 1`] = `
"expect(sinon.spy()).not.sinonLastReturnedWith(expected)

Expected: not undefined

Number of returns: 1"
`;
